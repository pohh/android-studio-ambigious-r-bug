repositories {
	maven {url 'https://maven.fabric.io/public'}
	maven {url 'https://oss.sonatype.org/content/repositories/snapshots/'}
	maven {url "http://www.leanplum.com/leanplum-sdks/"}
	maven {url 'http://mobile-sdk.jumio.com'}
	maven {url 'http://dl.bintray.com/urbanairship/android'}
	//Needed by Ably
	maven { url "https://bintray.com/ably-io/ably/ably-android" }
	maven { url "http://appboy.github.io/appboy-android-sdk/sdk"}
}

buildscript {
	repositories {
		maven {url 'https://maven.fabric.io/public'}
		maven {url 'http://mobile-sdk.jumio.com'}
		jcenter()
	}

	dependencies {
		classpath 'io.fabric.tools:gradle:1.+'
		classpath 'com.google.guava:guava:17.0'
		classpath 'de.mobilej.unmock:UnMockPlugin:0.3.6'
	}
}

apply plugin: 'com.android.application'
apply plugin: 'net.saliman.cobertura'
apply plugin: 'io.fabric'

// https://code.google.com/p/android/issues/detail?id=145068
apply plugin: 'de.mobilej.unmock'
def customUnusedNumber = 1
def customVersionMajor = 1
def customVersionMinor = 12
def customVersionPatch = 24

//Name = 1.2.0 string
//Code = number
def getCustomVersionCode(int unusedNumber, int versionMajor, int versionMinor, int versionPatch) {
	//"140,110,200"
	return 14 * 10000000 + unusedNumber * 100000 + versionMajor * 10000 + versionMinor * 100 + versionPatch
}

def getCustomMinSdkVersion() {
	return 16
}

def customVersionCode = getCustomVersionCode(customUnusedNumber, customVersionMajor, customVersionMinor, customVersionPatch)
def customVersionName = "2.9.2"

def toCamelCase(String string) {
	String result = ""
	string.findAll("[^\\W]+") {String word ->
		result += word.capitalize()
	}
	return result
}

cobertura {
	coverageFormats = ['xml', 'html']
	coverageIgnoreTrivial = true
	coverageIgnores = ['org.slf4j.Logger.*']
	coverageReportDir = new File("$buildDir/reports/cobertura")
	coverageCheckHaltOnFailure = true;
	coverageIncludes = ['.*com\\.offerup.*']
	coverageExcludes = [
			// standard leaf packages
			'.*\\.dagger\\..*',
			'.*\\.dto\\..*',
			'.*\\.activities\\..*',
			'.*\\.fragments\\..*',
			'.*\\.ui\\..*',
			'.*\\.views\\..*',
			'.*\\.adapters\\..*',
			'.*\\.constants\\..*',
			'.*\\.services\\..*',
			'.*\\.network\\..*',
			'.*\\.data\\..*',

			// Dagger classes
			'.*Dagger.*',
			'.*Component.*',
			'.*Module.*',
	]
	androidVariant = "stgQa"
}

android {

	useLibrary  'org.apache.http.legacy'
	compileSdkVersion rootProject.ext.compileSdkVersion
	buildToolsVersion rootProject.ext.buildToolsVersion
	testBuildType "qa"

	defaultConfig {
		minSdkVersion getCustomMinSdkVersion()
		targetSdkVersion rootProject.ext.targetSdkVersion
		versionCode customVersionCode
		versionName customVersionName

		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

		// Enabling multidex support.
		multiDexEnabled true

		vectorDrawables.useSupportLibrary = true

		dexOptions {
			javaMaxHeapSize "4g"
		}
	}

	sourceSets {
		main.res.srcDirs = ['src/main/res', 'src/main/jumio-res']
		// Move the tests to tests/java, tests/res, etc...
		// instrumentTest.setRoot('tests')

		// Move the build types to build-types/<type>
		// For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
		// This moves them out of them default location under src/<type>/... which would
		// conflict with src/ being used by the main source set.
		// Adding new build types or product flavors should be accompanied
		// by a similar customization.
		debug.setRoot('build-types/debug')
		release.setRoot('build-types/release')
		experimental.setRoot('build-types/experimental')
		androidTest {
			resources.srcDirs = ['src/androidTest/res']
		}
		iab.setRoot('build-types/release')
		qa.setRoot('build-types/debug')
	}
	packagingOptions {
		exclude 'META-INF/LICENSE.txt'
		exclude 'META-INF/NOTICE.txt'
		exclude 'LICENSE.txt'
		exclude 'META-INF/maven/com.squareup.okio/okio/pom.properties'
		exclude 'META-INF/maven/com.squareup.okhttp/okhttp/pom.properties'
		exclude 'META-INF/maven/com.squareup.okio/okio/pom.xml'
		exclude 'META-INF/maven/com.squareup.okhttp/okhttp/pom.xml'
	}
	lintOptions {
		disable 'StringFormatInvalid'
		abortOnError false
	}

	signingConfigs {
		release {
		}
		stg {
		}
	}

	flavorDimensions "backend"

	productFlavors {
		stg {
			dimension "backend"
			// once we get separate accounts for 3rd party APIs we can update them with this applicationId.
//			applicationId = "com.offerup.stg"
			signingConfig signingConfigs.stg
		}
		prod {
			dimension "backend"
			signingConfig signingConfigs.release
		}
	}

	buildTypes {
		release {
			// enable crashlytics where you need
			buildConfigField "boolean", "USE_CRASHLYTICS", "true"
			ext.enableCrashlytics = true
			buildConfigField "boolean", "ENABLE_ASSERT", "false"
			minifyEnabled true
			proguardFiles file('proguard-android.txt')
//			applicationVariants.all {variant ->
//				variant.outputs.all {output ->
//					outputFileName = "${variant.name}-${customVersionCode}-${customVersionName}.apk"
//				}
//			}
		}

		debug {
			// enable crashlytics where you need
			buildConfigField "boolean", "USE_CRASHLYTICS", "false"
			ext.enableCrashlytics = false
			buildConfigField "boolean", "ENABLE_ASSERT", "true"
		}

		// qa variant which enables test coverage.
		qa {
			initWith(buildTypes.debug)
			// used by cobertura.  enabling this flag by default breaks debugger, don't put this in dev variants.
			testCoverageEnabled true
		}

		// debug variant which is signed with release key.
		// the signing config overrides the default set in "backend" flavour dimension
		// this variant is used for testing in app billing.
		iab {
			initWith(buildTypes.debug)
			signingConfig signingConfigs.release
		}

		// experimental variant, used for nightly internal builds.
		experimental {
			initWith(buildTypes.release)
			buildConfigField "boolean", "ENABLE_ASSERT", "true"
		}
	}
}

// for dagger2 annotation processing.  Without this modules and components will not be recognized by android studio.
android.applicationVariants.all {
	def aptOutputDir = new File(buildDir, "generated/source/apt/${it.unitTestVariant.dirName}")
	it.unitTestVariant.addJavaSourceFoldersToModel(aptOutputDir)
}

dependencies {
	String playServicesVersion = "9.8.0"
	String supportLibVersion = "25.3.1"
	String stethoVersion = "1.1.1";
	String leakCanaryVersion = "1.5"
	String awsVersion = "2.4.2"
	compile "com.amazonaws:aws-android-sdk-core:${awsVersion}"
	compile "com.amazonaws:aws-android-sdk-kinesis:${awsVersion}"
	compile "com.google.android.gms:play-services-appindexing:${playServicesVersion}"
	compile "com.google.android.gms:play-services-location:${playServicesVersion}"
	compile "com.google.android.gms:play-services-maps:${playServicesVersion}"
	compile "com.google.android.gms:play-services-ads:${playServicesVersion}"
	compile "com.google.android.gms:play-services-analytics:${playServicesVersion}"
	compile "com.google.android.gms:play-services-gcm:${playServicesVersion}"
	compile "com.google.android.gms:play-services-wallet:${playServicesVersion}"
	compile "com.android.support:appcompat-v7:${supportLibVersion}"
	compile "com.android.support:cardview-v7:${supportLibVersion}"
	compile "com.android.support:design:${supportLibVersion}"
	compile 'com.android.support:multidex:1.0.1'
	compile "com.android.support:recyclerview-v7:${supportLibVersion}"
	compile "com.android.support:support-v13:${supportLibVersion}"
	compile 'com.facebook.android:facebook-android-sdk:4.15.0'
	compile 'com.google.code.gson:gson:2.4'
	compile 'com.google.dagger:dagger:2.8'
	annotationProcessor 'com.google.dagger:dagger-compiler:2.8'
	testAnnotationProcessor 'com.google.dagger:dagger-compiler:2.8'
	androidTestAnnotationProcessor 'com.google.dagger:dagger-compiler:2.8'
	compile 'com.darwinsys:hirondelle-date4j:1.5.1'
	compile 'com.squareup.retrofit:retrofit:1.9.0'
	compile 'com.squareup.okhttp:okhttp:2.3.0'
	compile 'com.squareup.okhttp:okhttp-urlconnection:2.3.0'
	compile 'com.squareup:otto:1.3.8'
	//NOTE: do not upgrade picasso until retrofit and okhttp are upgraded and
	// crash resolved
	compile 'com.squareup.picasso:picasso:2.4.0'
	compile 'com.leanplum:Leanplum:1.3.0.2'
	compile('com.apptentive:apptentive-android:3.0.1') {
		exclude group: 'com.android.support'
	}
	compile 'com.jumio.android:core:2.5.0@aar'
	compile 'com.jumio.android:nv:2.5.0@aar'
	compile 'com.jumio.android:nv-barcode:2.5.0@aar'
	compile 'com.stripe:stripe-android:1.0.3'
	compile 'io.reactivex:rxjava:1.1.8'
	compile 'io.reactivex:rxandroid:1.2.1'

	//NOTE: do not rearrange the order of these three imports. The "allowBackup" flag for these libraries have different values
	//and we want the urban airship value to override the hintcase library's manifest.
	compile 'com.joanfuentes:HintCase:1.0.4'
	compile 'com.joanfuentes:HintCaseAssets:1.0.4'
	compile 'com.urbanairship.android:urbanairship-sdk:8.0.2'
	compile 'com.facebook.android:audience-network-sdk:4.21.1'
	compile 'com.appsflyer:af-android-sdk:4.7.1'

	compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
		transitive = true
	}
	experimentalCompile 'net.hockeyapp.android:HockeySDK:4.0.0'

	qaCompile "com.facebook.stetho:stetho:${stethoVersion}"
	qaCompile "com.facebook.stetho:stetho-okhttp:${stethoVersion}"
	qaCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"

	debugCompile "com.facebook.stetho:stetho:${stethoVersion}"
	debugCompile "com.facebook.stetho:stetho-okhttp:${stethoVersion}"
	debugCompile "com.squareup.leakcanary:leakcanary-android:${leakCanaryVersion}"

	iabCompile "com.facebook.stetho:stetho:${stethoVersion}"
	iabCompile "com.facebook.stetho:stetho-okhttp:${stethoVersion}"
	iabCompile "com.squareup.leakcanary:leakcanary-android:${leakCanaryVersion}"

	experimentalCompile "com.facebook.stetho:stetho:${stethoVersion}"
	experimentalCompile "com.facebook.stetho:stetho-okhttp:${stethoVersion}"
	experimentalCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"

	releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"

	testCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"
	androidTestCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"

	//Ably
	compile 'io.ably:ably-android:0.8.10'

	//Appboy
	compile 'com.appboy:android-sdk-ui:2.0.1'

	// Testing-only dependencies
	androidTestCompile ('com.android.support.test:runner:0.3') {
		exclude group: 'com.android.support'
	}
	androidTestCompile ('com.android.support.test:rules:0.3') {
		exclude group: 'com.android.support'
	}
	androidTestCompile ('com.android.support.test.espresso:espresso-core:2.2.2') {
		exclude group: 'com.android.support'
		exclude group: 'javax.inject', module: 'javax.inject'
		exclude group: 'com.squareup', module: 'javawriter'
	}
	androidTestCompile ('com.android.support.test.espresso:espresso-contrib:2.2.2') {
		exclude group: 'com.android.support'
	}
	androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
	testCompile 'junit:junit:4.12'
	testCompile 'org.mockito:mockito-core:1.10.19'
	testCompile 'org.robolectric:robolectric:3.3.2'
}